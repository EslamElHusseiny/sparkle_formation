#!/usr/bin/env ruby

require 'json'
require 'nokogiri'
require 'fileutils'

STORE = '/tmp/aws-cfn-docs'

unless(File.directory?(STORE))
  FileUtils.mkdir_p(STORE)
  Dir.chdir(STORE) do
    unless(system('wget -q -r -l 1 -A "aws-*" "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"'))
      puts "FAILED: Documentation fetching failed!"
      exit -1
    end
  end
end

aws_resources = {}

Dir.glob(File.join(STORE, '**/*.html')).each do |path|
  resource = nil
  begin
    file = Nokogiri::HTML(File.open(path, 'r'))
    type = file.css('h1.topictitle').text.strip
    if(type.include?(' '))
      next
    end
    resource = file.css('div.variablelist').first
    if(resource)
      names = resource.css('dt').css('span').map(&:text).map(&:strip)
      types = resource.css('dd p').map(&:text).find_all do |x|
        x.include?('Type')
      end.map do |x|
        if(x.downcase.match(/(\s|^)list(\s|$)/))
          'Array'
        elsif(x.include?('Type: String'))
          'String'
        elsif(x.include?('Type: Boolean'))
          'Boolean'
        elsif(x.include?('Type: Integer'))
          'Number'
        elsif(x.include?('Type:') && x.include?('JSON') && x.include?('document'))
          'JSON'
        else
          'Unknown'
        end
      end
      requires = resource.css('dd p').map(&:text).find_all do |x|
        x.include?('Required:')
      end.map do |x|
        x.include?('No') ? false : true
      end
      descriptions = resource.css('dd').map do |dd|
        dd.css('p').first.text.strip
      end.map do |string|
        string.split("\n").map(&:strip).join(' ')
      end
      update_causes = resource.css('dd p').map(&:text).find_all do |x|
        x.include?('Update requires')
      end.map do |x|
        x = x.downcase
        if(x.include?('replacement'))
          :replacement
        elsif(x.include?('no interruption'))
          :none
        elsif(x.include?('interruption'))
          :interrupt
        elsif(x.include?('not supported'))
          :unavailable
        else
          :unknown
        end
      end
      property_hashes = names.size.times.map do |i|
        [names[i], {:description => descriptions[i], :required => requires[i], :type => types[i], :update_causes => update_causes[i]}]
      end
      aws_resources[type] = {
        :properties => names,
        :full_properties => Hash[property_hashes]
      }
    else
      resource = file.css('div.informaltable')
      if(resource)
        aws_resources[type] = {
          :properties => resource.css('tr').map{|tr|
            item = tr.css('td').first
            item ? item.text.strip : nil
          }.compact
        }
      else
        next
      end
    end
    aws_resources[type][:path] = File.basename(path)
  end
end

require 'pp'

pp aws_resources
